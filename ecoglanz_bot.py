import os
import time
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

# --- –°–¢–ê–ù–ò –¥–ª—è ConversationHandler ---
CITY, CLEAN_TYPE, PLACE_TYPE, ADDRESS, DATE, TIME, PHONE, CONFIRM = range(8)

# --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets ---
def append_to_google_sheet(order):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("eco-glanz-bot-key.json", scope)
        client = gspread.authorize(creds)
        worksheet = client.open("EcoGlanzOrders2024").worksheet("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è")
        row = [
            order.get("user"),
            order.get("city"),
            order.get("clean_type"),
            order.get("place_type"),
            order.get("address"),
            f"{order.get('date')} {order.get('time')}",
            order.get("phone", ""),
            order.get("timestamp"),
            order.get("status", "–û—á—ñ–∫—É—î—Ç—å—Å—è")
        ]
        worksheet.append_row(row)
        print("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ —É Google –¢–∞–±–ª–∏—Ü—é")
    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ —Ç–∞–±–ª–∏—Ü—é: {e}")

# --- –õ–æ–≥—ñ–∫–∞ Telegram-–±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ñ—Ç–∞—î–º–æ –≤ EcoGlanz!\n"
        "–î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º–æ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:",
        reply_markup=ReplyKeyboardMarkup([["–ö–∏—ó–≤", "–õ—å–≤—ñ–≤", "–û–¥–µ—Å–∞"]], one_time_keyboard=True, resize_keyboard=True)
    )
    context.user_data.clear()
    return CITY

async def city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è:",
        reply_markup=ReplyKeyboardMarkup([["–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ", "–ü—ñ–¥—Ç—Ä–∏–º—É—é—á–µ", "–ü—ñ—Å–ª—è —Ä–µ–º–æ–Ω—Ç—É"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return CLEAN_TYPE

async def clean_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["clean_type"] = update.message.text
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è:",
        reply_markup=ReplyKeyboardMarkup([["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–ë—É–¥–∏–Ω–æ–∫", "–û—Ñ—ñ—Å"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return PLACE_TYPE

async def place_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["place_type"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è:", reply_markup=ReplyKeyboardRemove())
    return ADDRESS

async def address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    await update.message.reply_text("–ù–∞ —è–∫—É –¥–∞—Ç—É –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è? (—Ñ–æ—Ä–º–∞—Ç: 2024-05-27)")
    return DATE

async def date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["date"] = update.message.text
    await update.message.reply_text("–û –∫–æ—Ç—Ä—ñ–π –≥–æ–¥–∏–Ω—ñ? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10:00)")
    return TIME

async def time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text
    await update.message.reply_text("–ó–∞–ª–∏—à—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤ º—è–∑–∫—É:")
    return PHONE

async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    summary = (
        f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –∑–∞—è–≤–∫–∏:\n"
        f"–ú—ñ—Å—Ç–æ: {context.user_data['city']}\n"
        f"–¢–∏–ø –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è: {context.user_data['clean_type']}\n"
        f"–ü—Ä–∏–º—ñ—â–µ–Ω–Ω—è: {context.user_data['place_type']}\n"
        f"–ê–¥—Ä–µ—Å–∞: {context.user_data['address']}\n"
        f"–î–∞—Ç–∞: {context.user_data['date']} {context.user_data['time']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        "–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', –∞–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
    )
    await update.message.reply_text(summary, reply_markup=ReplyKeyboardMarkup([["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"]], one_time_keyboard=True, resize_keyboard=True))
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
        await update.message.reply_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    order = context.user_data.copy()
    order["user"] = update.effective_user.full_name
    order["timestamp"] = int(time.time())
    order["status"] = "–û—á—ñ–∫—É—î—Ç—å—Å—è"

    append_to_google_sheet(order)

    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    # –ú–æ–∂–µ—à –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω –ø—Ä—è–º–æ —Ç—É—Ç
    TOKEN = os.getenv("CLIENT_BOT_TOKEN")
    # –∞–±–æ –∑–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ: TOKEN = "–¢–í–û–ô_–ö–õ–ò–ï–ù–¢–°–ö–ò–ô_–ë–û–¢_–¢–û–ö–ï–ù"

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
            CLEAN_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, clean_type)],
            PLACE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, place_type)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, time_input)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("cancel", cancel))

    print("üöÄ EcoGlanz Client Bot –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()

import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, ContextTypes
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json

import pkg_resources
print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏:", [p.project_name for p in pkg_resources.working_set])

ADMIN_ID = 929619425

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –∑ —Ñ–∞–π–ª—É
with open("cities.json", "r") as f:
    WORKERS = json.load(f)

# –°—Ç–≤–æ—Ä—é—î–º–æ –±—ñ–ª–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ (ID)
ALLOWED_WORKERS = []
for city, ids in WORKERS.items():
    ALLOWED_WORKERS.extend(ids)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ
def get_orders_for_city(city):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("eco-glanz-bot-key.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open("EcoGlanzOrders").worksheet(city)
        records = sheet.get_all_records()
        return records
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ:", e)
        return []

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in ALLOWED_WORKERS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ EcoGlanz!")
        return

    found = False
    for city, ids in WORKERS.items():
        if user_id in ids:
            context.user_data["city"] = city
            found = True
            break

    if not found:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–∏—Å—Ç–µ–º–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await update.message.reply_text(
        f"‚úÖ –í–∞—Å —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —è–∫ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –º—ñ—Å—Ç–∞ {context.user_data['city']}\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /orders —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞—è–≤–∫–∏."
    )

# –ö–æ–º–∞–Ω–¥–∞ /orders ‚Äî –ø–æ–∫–∞–∑ –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–≤–æ–≥–æ –º—ñ—Å—Ç–∞
async def list_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in ALLOWED_WORKERS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ EcoGlanz!")
        return

    city = context.user_data.get("city")
    if not city:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start –¥–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞.")
        return

    orders = get_orders_for_city(city)
    count = 0
    for i, order in enumerate(orders):
        if order.get("–°—Ç–∞—Ç—É—Å") == "–û—á—ñ–∫—É—î—Ç—å—Å—è":
            count += 1
            text = (
                f"üìç –ê–¥—Ä–µ—Å–∞: {order['–ê–¥—Ä–µ—Å–∞']}\n"
                f"üßπ –¢–∏–ø: {order['–¢–∏–ø –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è']}\n"
                f"üìÜ –î–∞—Ç–∞: {order['–î–∞—Ç–∞ —ñ —á–∞—Å']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {order['–°—Ç–∞—Ç—É—Å']}"
            )
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"take_{i}")]
            ])
            await update.message.reply_text(text, reply_markup=keyboard)

    if count == 0:
        await update.message.reply_text("üò¥ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞—è–≤–æ–∫ —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ.")

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–π–Ω—è—Ç–∏"
async def handle_take_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_WORKERS:
        await update.callback_query.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤!", show_alert=True)
        return

    query = update.callback_query
    await query.answer()

    city = context.user_data.get("city")
    user_name = update.effective_user.first_name
    order_index = int(query.data.split("_")[1])
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("eco-glanz-bot-key.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open("EcoGlanzOrders").worksheet(city)
        cell = sheet.find("–û—á—ñ–∫—É—î—Ç—å—Å—è")
        row = cell.row
        sheet.update_cell(row, 8, "–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è")
        sheet.update_cell(row, 1, f"–ü—Ä–∏–π–Ω—è–≤: {user_name}")
        await query.edit_message_text("‚úÖ –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        print("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ:", e)

def main():
    # –ú–æ–∂–Ω–∞ –±—Ä–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è –±–µ–∑–ø–µ–∫–∏:
    # TOKEN = os.getenv("WORKER_BOT_TOKEN")
    # app = ApplicationBuilder().token(TOKEN).build()
    app = ApplicationBuilder().token("7361780063:AAE0GhEFnIN3FMyaLaURtXSdCKmU6iAOTcY").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("orders", list_orders))
    app.add_handler(CallbackQueryHandler(handle_take_order, pattern="^take_"))

    print("üöÄ EcoGlanz Workers –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()

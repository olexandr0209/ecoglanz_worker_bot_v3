import os
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –∑ —Ñ–∞–π–ª—É
with open("cities.json", "r") as f:
    WORKERS = json.load(f)

ALLOWED_WORKERS = []
for city, ids in WORKERS.items():
    ALLOWED_WORKERS.extend(ids)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in ALLOWED_WORKERS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ EcoGlanz!")
        return

    found = False
    for city, ids in WORKERS.items():
        if user_id in ids:
            context.user_data["city"] = city
            found = True
            break

    if not found:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–∏—Å—Ç–µ–º–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await update.message.reply_text(
        f"‚úÖ –í–∞—Å —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —è–∫ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –º—ñ—Å—Ç–∞ {context.user_data['city']}\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /orders —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞—è–≤–∫–∏."
    )

async def list_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in ALLOWED_WORKERS:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ EcoGlanz!")
        return

    city = context.user_data.get("city")
    if not city:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start –¥–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞.")
        return

    # --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets ---
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("eco-glanz-bot-key.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open("EcoGlanzOrders").worksheet(city)
        records = sheet.get_all_records()

        found = 0
        for i, order in enumerate(records, start=2):  # 1-–π —Ä—è–¥–æ–∫ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if str(order.get("–°—Ç–∞—Ç—É—Å", "")).strip() == "–û—á—ñ–∫—É—î—Ç—å—Å—è":
                found += 1
                text = (
                    f"üìç –ê–¥—Ä–µ—Å–∞: {order.get('–ê–¥—Ä–µ—Å–∞')}\n"
                    f"üßπ –¢–∏–ø: {order.get('–¢–∏–ø –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è')}\n"
                    f"üè† –ü—Ä–∏–º—ñ—â–µ–Ω–Ω—è: {order.get('–ü—Ä–∏–º—ñ—â–µ–Ω–Ω—è')}\n"
                    f"üìÜ –î–∞—Ç–∞ —ñ —á–∞—Å: {order.get('–ß–∞—Å –∑–∞—è–≤–∫–∏')}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('–¢–µ–ª–µ—Ñ–æ–Ω')}\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: {order.get('–°—Ç–∞—Ç—É—Å')}"
                )
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"take_{i}")]
                ])
                await update.message.reply_text(text, reply_markup=keyboard)

        if found == 0:
            await update.message.reply_text("üò¥ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∑–∞—è–≤–æ–∫ —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ.")
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Google –¢–∞–±–ª–∏—Ü—ñ.")
        print("–ü–æ–º–∏–ª–∫–∞:", e)

async def handle_take_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_WORKERS:
        await update.callback_query.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤!", show_alert=True)
        return

    query = update.callback_query
    await query.answer()

    city = context.user_data.get("city")
    order_index = int(query.data.split("_")[1])
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("eco-glanz-bot-key.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open("EcoGlanzOrders").worksheet(city)
        # –ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ "–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è"
        sheet.update_cell(order_index, 8, "–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è")
        await query.edit_message_text("‚úÖ –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        print("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ:", e)

def main():
    app = ApplicationBuilder().token("7361780063:AAE0GhEFnIN3FMyaLaURtXSdCKmU6iAOTcY").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("orders", list_orders))
    app.add_handler(CallbackQueryHandler(handle_take_order, pattern="^take_"))

    print("üöÄ EcoGlanz Workers –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()
